import type {
  IInPersonLinkResponse,
  IUpdateRecipientSubmitParams,
  IUpdateRecipientClaimEnvelope,
  IUpdateRecipientAgreedParams,
  IUpdateRecipientNameParams,
  IUpdateRecipientDeclineParams,
  IUpdateRecipientPrepareParams,
  ISignerTokenResponse,
  TAuthenticateRecipientRequest,
  IUpdateRecipientParams,
} from './Types';
import type {IRecipient} from '../Models';
import {VerdocsEndpoint} from '../VerdocsEndpoint';

/**
 * Update a recipient's status.
 *
 * @group Recipients
 * @api PUT /envelopes/:envelope_id/recipients/:role_name Update Recipient Status
 * @apiParam string(format:uuid) envelope_id The envelope to operate on.
 * @apiParam string role_name The role to adjust.
 * @apiBody string(enum:'submit'|'decline'|'owner_update'|'update'|'prepare') action The action to take. Adjusts the status, and may also perform other operations.
 * @apiBody string first_name? Ignored unless action is 'owner_update' or 'update'. The new owner's or recipient's first name.
 * @apiBody string last_name? Ignored unless action is 'owner_update' or 'update'. The new owner's or recipient's last name.
 * @apiBody string email? Ignored unless action is 'owner_update'. The new owner's email address.
 * @apiBody boolean agreed? Ignored unless action is 'update'. Set to true to accept the e-signing disclosures.
 * @apiBody array(items:IRecipient) recipients? Ignored unless action is 'prepare'. A list of recipients and their fields to set defaults for.
 * @apiSuccess IRecipient . The updated Recipient.
 */
export const updateRecipientStatus = async (
  endpoint: VerdocsEndpoint,
  envelope_id: string,
  role_name: string,
  params:
    | IUpdateRecipientSubmitParams
    | IUpdateRecipientClaimEnvelope
    | IUpdateRecipientAgreedParams
    | IUpdateRecipientNameParams
    | IUpdateRecipientDeclineParams
    | IUpdateRecipientPrepareParams,
) =>
  endpoint.api //
    .put<IRecipient>(`/envelopes/${envelope_id}/recipients/${role_name}`, params)
    .then((r) => r.data);

/**
 * Submit an envelope (signing is finished). Note that all fields must be valid/completed for this to succeed.
 */
export const envelopeRecipientSubmit = (endpoint: VerdocsEndpoint, envelopeId: string, roleName: string) =>
  updateRecipientStatus(endpoint, envelopeId, roleName, {action: 'submit'});

/**
 * Decline to complete an envelope (signing will not terminated).
 */
export const envelopeRecipientDecline = (endpoint: VerdocsEndpoint, envelopeId: string, roleName: string) =>
  updateRecipientStatus(endpoint, envelopeId, roleName, {action: 'decline'});

/**
 * Claim / change ownership of an envelope. This is a special-case operation only available in certain workflows.
 */
export const envelopeRecipientChangeOwner = (
  endpoint: VerdocsEndpoint,
  envelope_id: string,
  role_name: string,
  email: string,
  first_name: string,
  last_name: string,
) => updateRecipientStatus(endpoint, envelope_id, role_name, {action: 'owner_update', email, first_name, last_name});

/**
 * Agree to electronic signing disclosures.
 */
export const envelopeRecipientAgree = (endpoint: VerdocsEndpoint, envelopeId: string, roleName: string, disclosures?: string) =>
  endpoint.api //
    .put<IRecipient>(`/v2/envelopes/${envelopeId}/recipients/${encodeURIComponent(roleName)}`, {action: 'accept', disclosures})
    .then((r) => r.data);

/**
 * Change a recipient's name.
 */
export const envelopeRecipientUpdateName = (
  endpoint: VerdocsEndpoint,
  envelopeId: string,
  roleName: string,
  first_name: string,
  last_name: string,
) => updateRecipientStatus(endpoint, envelopeId, roleName, {action: 'update', first_name, last_name});

/**
 * Change a recipient's name.
 */
export const envelopeRecipientPrepare = (endpoint: VerdocsEndpoint, envelopeId: string, roleName: string, recipients: IRecipient[]) =>
  updateRecipientStatus(endpoint, envelopeId, roleName, {action: 'prepare', recipients});

/**
 * Begin a signing session for an Envelope. This path requires an invite code, and should generally
 * be called with a NON-default Endpoint to avoid conflicting with any active user session the user
 * may have. To initiate in-person signing by an authenticated user (e.g. self-signing), call
 * getInPersonLink() instead. The response from that call includes both a link for direct signing
 * via a Web browser as well as an in-person access_key. That access_key.key may be used here as well.
 *
 * @group Recipients
 * @api POST /v2/sign/unauth/:envelope_id/:role_name/:key Start Signing Session
 * @apiParam string(format:uuid) envelope_id The envelope to operate on.
 * @apiParam string role_name The role to request.
 * @apiParam string key Access key generated by the envelope creator or email/SMS invite.
 * @apiSuccess ISignerTokenResponse . Signing session token and envelope/recipient metadata.
 */
export const startSigningSession = async (endpoint: VerdocsEndpoint, envelope_id: string, role_name: string, key: string) => {
  return endpoint.api //
    .post<ISignerTokenResponse>(`/v2/sign/unauth/${envelope_id}/${encodeURIComponent(role_name)}/${key}`)
    .then((r) => {
      endpoint.setToken(r.data.access_token, 'signing');
      return r.data;
    });
};

/**
 * Get an in-person signing link. Must be called by the owner/creator of the envelope. The response
 * also includes the raw access key that may be used to directly initiate a signing session (see
 * `startSigningSession`) as well as an access token representing a valid signing session for
 * immediate use in embeds or other applications. Note that in-person signing is considered a
 * lower-security operation than authenticated signing, and the final envelope certificate will
 * reflect this.
 *
 * @group Recipients
 * @api POST /v2/sign/in-person/:envelope_id/:role_name Get In-Person Signing Link
 * @apiParam string(format:uuid) envelope_id The envelope to operate on.
 * @apiParam string role_name The role to request.
 * @apiSuccess IInPersonLinkResponse . Signing session token and envelope/recipient metadata.
 */
export const getInPersonLink = (endpoint: VerdocsEndpoint, envelope_id: string, role_name: string) =>
  endpoint.api //
    .post<IInPersonLinkResponse>(`/v2/sign/in-person/${envelope_id}/${encodeURIComponent(role_name)}`)
    .then((r) => r.data);

/**
 * Verify a recipient within a signing session. All signing sessions use an invite code at a minimum,
 * but many scenarios require more robust verification of recipients, so one or more verification
 * methods may be attached to each recipient. If an authentication method is enabled, the
 * signer must first accept the e-signature disclosures, then complete each verification step
 * before attempting to view/display documents, complete any fields, or submit the envelope.
 * This endpoint should be called to complete each step. If the call fails an error will be
 * thrown.
 *
 * @group Recipients
 * @api POST /v2/sign/verify Verify recipient/signer
 * @apiParam string(enum:'passcode'|'email'|'sms'|'kba'|'id') auth_method The authentication method being completed
 * @apiParam string code? The passcode or OTP entered. Required for passcode, email, and SMS methods.
 * @apiParam boolean resend? For SMS or email methods, set to send a new code.
 * @apiParam boolean first_name? For KBA, the recipient's first name
 * @apiParam boolean last_name? For KBA, the recipient's last name
 * @apiParam boolean address? For KBA, the recipient's address
 * @apiParam boolean city? For KBA, the recipient's city
 * @apiParam boolean state? For KBA, the recipient's state
 * @apiParam boolean zip? For KBA, the recipient's zip code
 * @apiParam boolean ssn_last_4? For KBA, the last 4 digits of the recipient's SSN
 * @apiParam boolean dob? For KBA, the recipient's date of birth
 * @apiParam array(items:IKBAResponse) responses? For KBA, responses to any challenge questions presented
 * @apiSuccess ISignerTokenResponse . Updated signing session.
 */
export const verifySigner = (endpoint: VerdocsEndpoint, params: TAuthenticateRecipientRequest) =>
  endpoint.api //
    .post<ISignerTokenResponse>(`/v2/sign/verify`, params)
    .then((r) => r.data);

export const resendInvitation = (endpoint: VerdocsEndpoint, envelopeId: string, roleName: string, message: string) =>
  endpoint.api //
    .patch<{status: 'OK'}>(`/v2/envelopes/${envelopeId}/recipients/${encodeURIComponent(roleName)}`, {message})
    .then((r) => r.data);

/**
 * Delegate a recipient's signing responsibility. The envelope sender must enable this before the
 * recipient calls this endpoint, and only the recipient may call it, or the call will be rejected.
 * The recipient's role will be renamed and configured to indicate to whom the delegation was made,
 * and a new recipient entry with the updated details (e.g. name and email address) will be added
 * to the flow with the same role_name, order, and sequence of the original recipient. Unless
 * no_contact is set on the envelope, the delegation recipient and envelope creator will also be
 * notified.
 *
 * @group Recipients
 * @api PUT /v2/envelopes/:envelope_id/recipients/:role_name Delegate Recipient
 * @apiParam string(format:uuid) envelope_id The envelope to operate on.
 * @apiParam string role_name The role to operate on.
 * @apiBody string(enum:'delegate') action The operation to perform (delegate).
 * @apiBody string first_name The first name of the new recipient.
 * @apiBody string last_name The last name of the new recipient.
 * @apiBody string email The email address of the new recipient.
 * @apiBody string phone? Optional phone number for the new recipient.
 * @apiBody string message? Optional phone number for the new recipient's invitation.
 * @apiSuccess string . Success message.
 */
export const delegateRecipient = (
  endpoint: VerdocsEndpoint,
  envelopeId: string,
  roleName: string,
  params: {
    first_name: string;
    last_name: string;
    email: string;
    phone?: string;
    message?: string;
  },
) =>
  endpoint.api //
    .put<{status: 'OK'}>(`/v2/envelopes/${envelopeId}/recipients/${encodeURIComponent(roleName)}`, {action: 'delegate', ...params})
    .then((r) => r.data);

/**
 * Update a recipient. NOTE: User interfaces should rate-limit this operation to avoid spamming recipients.
 * Excessive use of this endpoint may result in Verdocs rate-limiting the calling application to prevent
 * abuse. This endpoint will return a 200 OK even if the no_contact flag is set on the envelope (in which
 * case the call will be silently ignored).
 *
 * If the recipient's first_name, last_name, email, or message are updated, a new invitation will be sent
 * to the recipient. This may also be used to trigger a reminder.
 *
 * @group Recipients
 * @api PATCH /envelopes/:envelope_id/recipients/:role_name Update Recipient
 * @apiParam string(format:uuid) envelope_id The envelope to operate on.
 * @apiParam string role_name The role name to update.
 * @apiBody string first_name? Update the recipient's first name.
 * @apiBody string last_name? Update the recipient's last name.
 * @apiBody string email? Update the recipient's email address. Updating this value will trigger a new invitation.
 * @apiBody string message? Update the recipient's invite message. Updating this value will trigger a new invitation.
 * @apiBody string phone? Update the recipient's phone number.
 * @apiBody string passcode? If passcode authentication is used, the recipient's address to prefill. May only be changed if the recipient has not already completed passcode-based auth.
 * @apiBody string address? If KBA-based authentication is used, the recipient's address to prefill. May only be changed if the recipient has not already completed KBA-based auth.
 * @apiBody string city? If KBA-based authentication is used, the recipient's city to prefill. May only be changed if the recipient has not already completed KBA-based auth.
 * @apiBody string state? If KBA-based authentication is used, the recipient's state to prefill. May only be changed if the recipient has not already completed KBA-based auth.
 * @apiBody string zip? If KBA-based authentication is used, the recipient's zip code to prefill. May only be changed if the recipient has not already completed KBA-based auth.
 * @apiBody string dob? If KBA-based authentication is used, the recipient's date of birth to prefill. May only be changed if the recipient has not already completed KBA-based auth.
 * @apiBody string ssn_last_4? If KBA-based authentication is used, the recipient's SSN-last-4 to prefill. May only be changed if the recipient has not already completed KBA-based auth.
 * @apiSuccess IRecipient . The updated Recipient.
 */
export const updateRecipient = (endpoint: VerdocsEndpoint, envelopeId: string, roleName: string, params: IUpdateRecipientParams) =>
  endpoint.api //
    .patch<IRecipient>(`/v2/envelopes/${envelopeId}/recipients/${encodeURIComponent(roleName)}`, params)
    .then((r) => r.data);
